server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name {{ " ".join(wifi_login_pages_domains) }};

    root {{ wifi_login_pages_path }}/dist;
    index index.html index.htm;

    # logging
    access_log {{ wifi_login_pages_path }}/log/nginx.access.log;
    error_log {{ wifi_login_pages_path }}/log/nginx.error.log error;

    include ssl.conf;
    include security.conf;

    gzip on;
    gzip_static on;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_min_length 1000;
    gzip_types text/plain image/svg+xml application/json
               application/javascript text/xml text/css application/xml
               application/x-font-ttf font/opentype;

    location @nodejs {
        proxy_hide_header Cache-Control;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";

        proxy_set_header   X-Forwarded-For $remote_addr;
        proxy_set_header   Host $http_host;
        proxy_pass         http://localhost:3030;
    }

    location / {
        try_files {{ wifi_login_pages_path }}/dist/maintenance.html $uri @nodejs;
    }

    location /static/ {
        alias {{ wifi_login_pages_path }}/static/;
    }
}

server {
    listen 80;
    listen [::]:80;
    server_name {{ " ".join(wifi_login_pages_domains) }};

    root {{ openwisp2_path }}/dist;

    # Necessary for Let's Encrypt Domain Name ownership validation
    location /.well-known/ {
        try_files $uri /dev/null =404;
    }

    location /static/ {
        alias {{ wifi_login_pages_path }}/static/;
    }

    location / {
        try_files {{ openwisp2_path }}/dist/maintenance.html $uri @redirect;
    }

    # redirect all requests to https
    location @redirect {
        return 301 https://$host$request_uri;
    }
}
